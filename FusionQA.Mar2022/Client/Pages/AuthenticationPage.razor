@page "/auth"
@using Stl.Fusion.Authentication
@inherits Stl.Fusion.Blazor.ComputedStateComponent<(User? User, List<AuthenticationPage.SessionInfoModel>? Sessions)>
@inject Session _session
@inject IAuth _auth
@inject ClientAuthHelper _clientAuthHelper
@inject IFusionTime _fusionTime
@inject NavigationManager _nav

@{
    var state = State.LatestNonErrorValue;
    var error = State.Error;
    var user = state.User ?? new("");
    var sessions = state.Sessions ?? new();
    var usedAuthSchemas = user.Identities.Select(kv => kv.Key.Schema).ToHashSet();
    var unusedAuthSchemas = AuthSchemas.Where(p => !usedAuthSchemas.Contains(p.Name)).ToArray();
}

<h1>Authentication</h1>

<WhenException Title="Update error:" Exception="@error" />

<div class="card">
    <div class="card-body">
        <h5 class="card-title">Session properties:</h5>
        <div class="card-text">
            <ul>
                <li><code>Session.Id</code>: <b><code>@_session.Id</code></b></li>
            </ul>
        </div>
    </div>
</div>

<div class="card">
    <div class="card-body">
        <div class="card-title">User properties:</div>
        <div class="card-text">
            <ul>
                <li><code>User.IsAuthenticated</code>: <b><code>@user.IsAuthenticated</code></b></li>
                <li><code>User.Id</code>: <b><code>@user.Id</code></b></li>
                <li><code>User.Name</code>: <b><code>@user.Name</code></b></li>
                <li><code>User.Version</code>: <b><code>@user.Version</code></b></li>
            </ul>
            @if (user.IsAuthenticated) {
                <div class="card-subtitle">Claims:</div>
                <ul>
                    @foreach (var (key, value) in user.Claims) {
                        <li><code>@key</code>: <b><code>@value</code></b></li>
                    }
                </ul>
                <div class="card-subtitle">Identities:</div>
                <ul>
                    @foreach (var ((schema, schemaBoundId), _) in user.Identities) {
                        <li><code>@schema</code>: <b><code>@schemaBoundId</code></b></li>
                    }
                </ul>
            }
        </div>
    </div>
</div>


<div class="card">
    @if (user.IsAuthenticated && sessions.Count > 0) {
        <div class="card-body">
            <div class="card-title">Sessions:</div>
            <div class="card-text">
                <table class="table table-sm">
                    <thead>
                    <tr>
                        <th scope="col">IP</th>
                        <th scope="col">Browser</th>
                        <th scope="col">Created</th>
                        <th scope="col">Last Seen</th>
                        <th scope="col">Version</th>
                        <th scope="col"></th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var session in sessions) {
                        <tr @key="@session.Id">
                            <td>@session.IPAddress</td>
                            <td>@session.UserAgent</td>
                            <td>@session.Created</td>
                            <td>@session.LastSeen</td>
                            <td>@session.Version</td>
                            <td>
                                @if (session.IsCurrent) {
                                    <span>Current</span>
                                }
                                else {
                                    <button type="button" class="btn btn-sm btn-danger"
                                            @onclick="_ => _clientAuthHelper.SignOut(session.Id)">Kick</button>
                                }
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
        </div>
    }
    <div class="card-footer">
        @if (user.IsAuthenticated) {
            <button @onclick="_ => _clientAuthHelper.SignOut()">Sign out</button>
            <button @onclick="_ => _clientAuthHelper.SignOutEverywhere()">Sign out everywhere</button>
            @if (unusedAuthSchemas.Length != 0) {
                <span> or add account: </span>
                @foreach (var (name, displayName) in unusedAuthSchemas) {
                    <button @onclick="_ => _clientAuthHelper.SignIn(name)">@displayName</button>
                }
            }
        } else {
            <SignInDropdown/>
        }
    </div>
</div>

@code {
    public class SessionInfoModel
    {
        public string Id { get; set; } = "";
        public string IPAddress { get; set; } = "";
        public string UserAgent { get; set; } = "";
        public string Created { get; set; } = "";
        public string LastSeen { get; set; } = "";
        public long Version { get; set; }
        public bool IsCurrent { get; set; }
    }

    private (string Name, string DisplayName)[] AuthSchemas { get; set; } = Array.Empty<(string, string)>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) {
            // GetSchemas requires JS interop, so it can be called only at this point
            AuthSchemas = await _clientAuthHelper.GetSchemas();
            StateHasChanged();
        }
    }

    protected override async Task<(User?, List<SessionInfoModel>?)> ComputeState(CancellationToken cancellationToken)
    {
        var user = await _auth.GetUser(_session, cancellationToken);
        var sessions = await _auth.GetUserSessions(_session, cancellationToken).ConfigureAwait(false);
        var result = new List<SessionInfoModel>();

        foreach (var session in sessions) {
            var model = new SessionInfoModel() {
                Id = session.Id,
                IsCurrent = _session.Id == session.Id,
                IPAddress = session.IPAddress,
                UserAgent = session.UserAgent,
                Created = await _fusionTime.GetMomentsAgo(session.CreatedAt),
                LastSeen = await _fusionTime.GetMomentsAgo(session.LastSeenAt),
                Version = session.Version,
            };
            result.Add(model);
        }
        return (user, result);
    }
}

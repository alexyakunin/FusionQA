@page "/counter"
@using System.Threading
@using FusionQA.Mar2022.Shared
@using Stl.Fusion
@using Stl.Fusion.Extensions
@inherits Stl.Fusion.Blazor.ComputedStateComponent<string>
@inject ICounterService _counter
@inject IFusionTime _time
@inject NavigationManager _nav

@{
    var state = State.ValueOrDefault;
    var error = State.Error;
}

<h1>Counter</h1>

<div class="alert alert-primary">
    Open this page in <a href="@_nav.Uri" target="_blank">another window</a> to see it updates in sync.
</div>
@if (error != null) {
    <div class="alert alert-warning" role="alert">Update error: @error.Message</div>
}

<p>Count: @state</p>

<button class="btn btn-primary" @onclick="Increment">Increment</button>

@code {
     protected override async Task<string> ComputeState(CancellationToken cancellationToken)
     {
         var count = await _counter.Get(cancellationToken);
         return $"{count}";
     }

    private async Task Increment()
    {
        var computed = State.Computed; // Optional if the rest is commented out 
        await _counter.Increment();

        // The rest of code here is optional: it triggers instant state update.
        // If you comment it out, it will happen anyway, but with
        // a default update delay. The delay is controlled by UpdateDelayer,
        // see how it's registered in Program.cs.
        await computed.WhenInvalidated();
        await State.Update(); 
    }
}
